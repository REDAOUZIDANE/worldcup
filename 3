# 1. Create project structure
mkdir -p vamosway/{static/{css,js,images/uploads},templates/{auth,admin},models,services,migrations}
cd vamosway

# 2. Set up Python environment
python3 -m venv venv
source venv/bin/activate

# Install advanced requirements
pip install flask flask-login flask-sqlalchemy flask-migrate openai pillow python-dotenv requests stability-sdk python-multipart email-validator pyjwt cryptography

# 3. Create main application file with database integration
cat > app.py << 'EOL'
import os
from flask import Flask, render_template, request, jsonify, redirect, url_for, flash
from flask_login import LoginManager, UserMixin, login_user, logout_user, login_required, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from werkzeug.utils import secure_filename
from flask_sqlalchemy import SQLAlchemy
from flask_migrate import Migrate
from datetime import datetime, timedelta
import jwt
from email_validator import validate_email, EmailNotValidError
from dotenv import load_dotenv
import uuid

# Load environment variables
load_dotenv()

# Initialize Flask app
app = Flask(__name__)
app.config['SECRET_KEY'] = os.getenv('SECRET_KEY')
app.config['SQLALCHEMY_DATABASE_URI'] = os.getenv('DATABASE_URL', 'sqlite:///vamosway.db')
app.config['SQLALCHEMY_TRACK_MODIFICATIONS'] = False
app.config['UPLOAD_FOLDER'] = 'static/images/uploads'
app.config['MAX_CONTENT_LENGTH'] = 16 * 1024 * 1024  # 16MB
app.config['JWT_SECRET_KEY'] = os.getenv('JWT_SECRET_KEY')
app.config['JWT_ACCESS_TOKEN_EXPIRES'] = timedelta(hours=1)
app.config['MAIL_SERVER'] = os.getenv('MAIL_SERVER')
app.config['MAIL_PORT'] = os.getenv('MAIL_PORT')
app.config['MAIL_USE_TLS'] = os.getenv('MAIL_USE_TLS') == 'True'
app.config['MAIL_USERNAME'] = os.getenv('MAIL_USERNAME')
app.config['MAIL_PASSWORD'] = os.getenv('MAIL_PASSWORD')
app.config['MAIL_DEFAULT_SENDER'] = os.getenv('MAIL_DEFAULT_SENDER')

# Initialize extensions
db = SQLAlchemy(app)
migrate = Migrate(app, db)
login_manager = LoginManager(app)
login_manager.login_view = 'auth.login'

# Import models after db initialization
from models import User, Hotel, Activity, Booking, UserProfile, PasswordResetToken

# Import services
from services.auth_service import send_verification_email, send_password_reset_email
from services.image_service import generate_ai_image, process_uploaded_image

# Blueprint registration
from auth import auth_bp
from admin import admin_bp
app.register_blueprint(auth_bp)
app.register_blueprint(admin_bp)

@login_manager.user_loader
def load_user(user_id):
    return User.query.get(int(user_id))

@app.route('/')
def home():
    return render_template('index.html')

@app.route('/profile')
@login_required
def profile():
    return render_template('profile.html', user=current_user)

if __name__ == '__main__':
    app.run(debug=True)
EOL

# 4. Create auth blueprint
cat > auth.py << 'EOL'
from flask import Blueprint, render_template, redirect, url_for, flash, request
from flask_login import login_user, logout_user, current_user
from werkzeug.security import generate_password_hash, check_password_hash
from models import User, UserProfile, db
from services.auth_service import send_verification_email
from email_validator import validate_email, EmailNotValidError
import jwt
from datetime import datetime, timedelta
from app import app

auth_bp = Blueprint('auth', __name__)

@auth_bp.route('/register', methods=['GET', 'POST'])
def register():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        confirm_password = request.form.get('confirm_password')
        first_name = request.form.get('first_name')
        last_name = request.form.get('last_name')
        
        # Validate inputs
        errors = []
        
        try:
            valid = validate_email(email)
            email = valid.email
        except EmailNotValidError:
            errors.append('Invalid email address')
            
        if User.query.filter_by(email=email).first():
            errors.append('Email already registered')
            
        if len(password) < 8:
            errors.append('Password must be at least 8 characters')
            
        if password != confirm_password:
            errors.append('Passwords do not match')
            
        if errors:
            for error in errors:
                flash(error, 'danger')
            return redirect(url_for('auth.register'))
        
        # Create user
        hashed_password = generate_password_hash(password)
        new_user = User(
            email=email,
            password=hashed_password,
            email_verified=False
        )
        db.session.add(new_user)
        db.session.commit()
        
        # Create user profile
        profile = UserProfile(
            user_id=new_user.id,
            first_name=first_name,
            last_name=last_name,
            created_at=datetime.utcnow()
        )
        db.session.add(profile)
        db.session.commit()
        
        # Send verification email
        send_verification_email(new_user)
        
        flash('Registration successful! Please check your email to verify your account.', 'success')
        return redirect(url_for('auth.login'))
    
    return render_template('auth/register.html')

@auth_bp.route('/login', methods=['GET', 'POST'])
def login():
    if current_user.is_authenticated:
        return redirect(url_for('home'))
    
    if request.method == 'POST':
        email = request.form.get('email')
        password = request.form.get('password')
        remember = True if request.form.get('remember') else False
        
        user = User.query.filter_by(email=email).first()
        
        if not user or not check_password_hash(user.password, password):
            flash('Invalid email or password', 'danger')
            return redirect(url_for('auth.login'))
            
        if not user.email_verified:
            flash('Please verify your email before logging in', 'warning')
            return redirect(url_for('auth.login'))
            
        login_user(user, remember=remember)
        flash('Logged in successfully!', 'success')
        return redirect(url_for('profile'))
    
    return render_template('auth/login.html')

@auth_bp.route('/logout')
def logout():
    logout_user()
    flash('You have been logged out', 'info')
    return redirect(url_for('home'))

@auth_bp.route('/verify-email/<token>')
def verify_email(token):
    try:
        data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
        user = User.query.get(data['user_id'])
        
        if user and not user.email_verified:
            user.email_verified = True
            db.session.commit()
            flash('Email verified successfully! You can now log in.', 'success')
        else:
            flash('Invalid or expired verification link', 'danger')
    except jwt.ExpiredSignatureError:
        flash('Verification link has expired', 'danger')
    except jwt.InvalidTokenError:
        flash('Invalid verification link', 'danger')
    
    return redirect(url_for('auth.login'))

@auth_bp.route('/forgot-password', methods=['GET', 'POST'])
def forgot_password():
    if request.method == 'POST':
        email = request.form.get('email')
        user = User.query.filter_by(email=email).first()
        
        if user:
            send_password_reset_email(user)
        
        flash('If an account exists with that email, a password reset link has been sent', 'info')
        return redirect(url_for('auth.login'))
    
    return render_template('auth/forgot_password.html')

@auth_bp.route('/reset-password/<token>', methods=['GET', 'POST'])
def reset_password(token):
    try:
        data = jwt.decode(token, app.config['SECRET_KEY'], algorithms=['HS256'])
        user = User.query.get(data['user_id'])
        
        if not user:
            flash('Invalid password reset link', 'danger')
            return redirect(url_for('auth.forgot_password'))
            
        # Check if token exists in PasswordResetToken table
        reset_token = PasswordResetToken.query.filter_by(
            token=token,
            user_id=user.id,
            used=False
        ).first()
        
        if not reset_token or reset_token.expires_at < datetime.utcnow():
            flash('Password reset link has expired', 'danger')
            return redirect(url_for('auth.forgot_password'))
            
        if request.method == 'POST':
            password = request.form.get('password')
            confirm_password = request.form.get('confirm_password')
            
            if password != confirm_password:
                flash('Passwords do not match', 'danger')
                return redirect(request.url)
                
            if len(password) < 8:
                flash('Password must be at least 8 characters', 'danger')
                return redirect(request.url)
                
            user.password = generate_password_hash(password)
            reset_token.used = True
            db.session.commit()
            
            flash('Password updated successfully! You can now log in.', 'success')
            return redirect(url_for('auth.login'))
        
        return render_template('auth/reset_password.html', token=token)
        
    except jwt.ExpiredSignatureError:
        flash('Password reset link has expired', 'danger')
    except jwt.InvalidTokenError:
        flash('Invalid password reset link', 'danger')
    
    return redirect(url_for('auth.forgot_password'))
EOL

# 5. Create admin blueprint
cat > admin.py << 'EOL'
from flask import Blueprint, render_template, redirect, url_for, flash
from flask_login import login_required, current_user
from models import Hotel, Activity, db

admin_bp = Blueprint('admin', __name__, url_prefix='/admin')

@admin_bp.route('/dashboard')
@login_required
def dashboard():
    if not current_user.is_admin:
        flash('You do not have permission to access this page', 'danger')
        return redirect(url_for('home'))
    
    hotels = Hotel.query.all()
    activities = Activity.query.all()
    return render_template('admin/dashboard.html', hotels=hotels, activities=activities)

@admin_bp.route('/hotels/add', methods=['GET', 'POST'])
@login_required
def add_hotel():
    if not current_user.is_admin:
        flash('You do not have permission to access this page', 'danger')
        return redirect(url_for('home'))
    
    if request.method == 'POST':
        name = request.form.get('name')
        location = request.form.get('location')
        price = float(request.form.get('price'))
        description = request.form.get('description')
        
        new_hotel = Hotel(
            name=name,
            location=location,
            price=price,
            description=description,
            added_by=current_user.id
        )
        
        db.session.add(new_hotel)
        db.session.commit()
        
        flash('Hotel added successfully!', 'success')
        return redirect(url_for('admin.dashboard'))
    
    return render_template('admin/add_hotel.html')

# Add other admin routes...
EOL

# 6. Create database models
cat > models.py << 'EOL'
from app import db
from flask_login import UserMixin
from datetime import datetime
from werkzeug.security import generate_password_hash, check_password_hash

class User(UserMixin, db.Model):
    id = db.Column(db.Integer, primary_key=True)
    email = db.Column(db.String(120), unique=True, nullable=False)
    password = db.Column(db.String(255), nullable=False)
    email_verified = db.Column(db.Boolean, default=False)
    is_admin = db.Column(db.Boolean, default=False)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    last_login = db.Column(db.DateTime)
    profile = db.relationship('UserProfile', backref='user', uselist=False)
    hotels = db.relationship('Hotel', backref='added_by_user')
    password_reset_tokens = db.relationship('PasswordResetToken', backref='user')

    def set_password(self, password):
        self.password = generate_password_hash(password)

    def check_password(self, password):
        return check_password_hash(self.password, password)

    def get_reset_token(self, expires_in=3600):
        from app import app
        import jwt
        return jwt.encode(
            {'user_id': self.id, 'exp': datetime.utcnow() + timedelta(seconds=expires_in)},
            app.config['JWT_SECRET_KEY'],
            algorithm='HS256'
        )

class UserProfile(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'), unique=True)
    first_name = db.Column(db.String(50))
    last_name = db.Column(db.String(50))
    phone = db.Column(db.String(20))
    address = db.Column(db.String(200))
    city = db.Column(db.String(50))
    country = db.Column(db.String(50))
    profile_picture = db.Column(db.String(100))
    bio = db.Column(db.Text)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, onupdate=datetime.utcnow)

class PasswordResetToken(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    token = db.Column(db.String(500), unique=True)
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    expires_at = db.Column(db.DateTime)
    used = db.Column(db.Boolean, default=False)

class Hotel(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    location = db.Column(db.String(100), nullable=False)
    price = db.Column(db.Float, nullable=False)
    description = db.Column(db.Text, nullable=False)
    image = db.Column(db.String(200))
    rating = db.Column(db.Float, default=4.0)
    added_by = db.Column(db.Integer, db.ForeignKey('user.id'))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, onupdate=datetime.utcnow)

class Activity(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    name = db.Column(db.String(100), nullable=False)
    location = db.Column(db.String(100), nullable=False)
    price = db.Column(db.Float, nullable=False)
    description = db.Column(db.Text, nullable=False)
    image = db.Column(db.String(200))
    duration = db.Column(db.String(50))
    added_by = db.Column(db.Integer, db.ForeignKey('user.id'))
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, onupdate=datetime.utcnow)

class Booking(db.Model):
    id = db.Column(db.Integer, primary_key=True)
    user_id = db.Column(db.Integer, db.ForeignKey('user.id'))
    hotel_id = db.Column(db.Integer, db.ForeignKey('hotel.id'))
    activity_id = db.Column(db.Integer, db.ForeignKey('activity.id'))
    check_in = db.Column(db.DateTime)
    check_out = db.Column(db.DateTime)
    guests = db.Column(db.Integer)
    total_price = db.Column(db.Float)
    status = db.Column(db.String(20), default='pending')
    created_at = db.Column(db.DateTime, default=datetime.utcnow)
    updated_at = db.Column(db.DateTime, onupdate=datetime.utcnow)
EOL

# 7. Create auth services
mkdir -p services
cat > services/auth_service.py << 'EOL'
import jwt
from datetime import datetime, timedelta
from flask import url_for, render_template
from app import app
from models import User, PasswordResetToken
from extensions import mail
from flask_mail import Message

def send_verification_email(user):
    token = user.get_reset_token()
    verify_url = url_for('auth.verify_email', token=token, _external=True)
    
    msg = Message("Verify Your Email - VamosWay",
                  recipients=[user.email])
    msg.body = render_template('emails/verify_email.txt', verify_url=verify_url)
    msg.html = render_template('emails/verify_email.html', verify_url=verify_url)
    
    try:
        mail.send(msg)
    except Exception as e:
        app.logger.error(f"Error sending verification email: {e}")

def send_password_reset_email(user):
    token = user.get_reset_token()
    expires_at = datetime.utcnow() + timedelta(hours=1)
    
    # Store the token in database
    reset_token = PasswordResetToken(
        user_id=user.id,
        token=token,
        expires_at=expires_at
    )
    db.session.add(reset_token)
    db.session.commit()
    
    reset_url = url_for('auth.reset_password', token=token, _external=True)
    
    msg = Message("Password Reset Request - VamosWay",
                  recipients=[user.email])
    msg.body = render_template('emails/reset_password.txt', reset_url=reset_url)
    msg.html = render_template('emails/reset_password.html', reset_url=reset_url)
    
    try:
        mail.send(msg)
    except Exception as e:
        app.logger.error(f"Error sending password reset email: {e}")
EOL

# 8. Create email templates
mkdir -p templates/emails
cat > templates/emails/verify_email.html << 'EOL'
<!DOCTYPE html>
<html>
<head>
    <title>Verify Your Email</title>
</head>
<body>
    <h1>Welcome to VamosWay!</h1>
    <p>Please click the link below to verify your email address:</p>
    <a href="{{ verify_url }}">Verify Email</a>
    <p>If you didn't create an account, please ignore this email.</p>
</body>
</html>
EOL

cat > templates/emails/verify_email.txt << 'EOL'
Welcome to VamosWay!

Please click the following link to verify your email address:
{{ verify_url }}

If you didn't create an account, please ignore this email.
EOL

# 9. Create environment file
cat > .env << 'EOL'
SECRET_KEY=your-secret-key-here
DATABASE_URL=sqlite:///vamosway.db
JWT_SECRET_KEY=your-jwt-secret-key-here
MAIL_SERVER=smtp.example.com
MAIL_PORT=587
MAIL_USE_TLS=True
MAIL_USERNAME=your-email@example.com
MAIL_PASSWORD=your-email-password
MAIL_DEFAULT_SENDER=no-reply@vamosway.com
OPENAI_API_KEY=your-openai-api-key
STABILITY_KEY=your-stability-ai-key
EOL

# 10. Create requirements file
cat > requirements.txt << 'EOL'
flask
flask-login
flask-sqlalchemy
flask-migrate
flask-mail
python-dotenv
email-validator
pyjwt
cryptography
openai
pillow
requests
stability-sdk
python-multipart
EOL

# 11. Initialize database and run migrations
flask db init
flask db migrate -m "Initial migration"
flask db upgrade

# 12. Create admin user script
cat > create_admin.py << 'EOL'
from app import app, db
from models import User, UserProfile

def create_admin():
    with app.app_context():
        admin_email = 'admin@vamosway.com'
        admin_password = 'admin123'
        
        if not User.query.filter_by(email=admin_email).first():
            admin = User(
                email=admin_email,
                password=generate_password_hash(admin_password),
                email_verified=True,
                is_admin=True
            )
            db.session.add(admin)
            db.session.commit()
            
            profile = UserProfile(
                user_id=admin.id,
                first_name='Admin',
                last_name='User'
            )
            db.session.add(profile)
            db.session.commit()
            print('Admin user created successfully!')
        else:
            print('Admin user already exists')

if __name__ == '__main__':
    create_admin()
EOL

# Run the script to create admin user
python create_admin.py

# Run the application
flask run
